# Based on sicci2sit_protoC01_cryosat2_north.yaml and added with uncertainty tags and updated ssa smoothing

id: "ESA CCI Phase-2 CryoSat-2 Arctic climate data record v1 (ccicdr_cryosat2_nh_001)"

# Level 2 processor settings are mission specific
mission:
    id: icesat
    
# Regions Settings (for file selection and potential subsetting
roi:
    pyclass: LowerLatLimit
    hemisphere: north
    options:
        latitude_threshold: 50.0

# Sources of ancillary datasets
# (the tag "name" links to the corresponding tag in config/auxdata.yaml)
auxdata:
    
    mss:
        name: dtu15
        options: null
    sic:
        name: osisafcdr
        options: null
    sitype:
        name: icdc_nasateam
        options: null
    snow: 
        name: warren99
        options: 
            fyi_correction_factor: 0.5
            smooth_snow_depth: true
            smooth_filter_width_m: 25000.0
            valid_snow_depth_range: [0, 0.6]
            invalid_replace: .0

# geophysical corrections applied to the l1b range window
corrections: []

# Surface type classification algorithm
surface_type: 
    pyclass: ICESatFarellEtAl2009
    options: 
        lrm:
            ocean:
                ice_concentration_min: 5.0
            lead:
                reflectivity_max: 0.5
                echo_gain_min: 13
                echo_gain_max: 28
                ice_concentration_min: 70.0
            sea_ice:
                reflectivity_min: 0.5
                ice_concentration_min: 70.0
        
# Retracking algorithm dependent on surface type
retracker: 
    ocean: 
        pyclass: NoneRetracker
        options: null
    lead: 
        pyclass: ICESatGLAH13Elevation
        options: 
            uncertainty:
                type: fixed
                value: 0.1
    sea_ice: 
        pyclass: ICESatGLAH13Elevation
        options: 
            uncertainty:
                type: fixed
                value: 0.1
            
# Algorithm for instantaneos sea surface height (mss + ssa) and radar freeboard 
ssa: 
    pyclass: SSASmoothedLinear
    options: 
        use_ocean_wfm: False
        smooth_filter_width_m: 100000.0
        smooth_filter_width_footprint_size: 300.0
        pre_filtering: true       
        pre_filter_maximum_mss_median_offset: 5.0 # in meter
        uncertainty_tiepoints_distance_max: 100000.
        uncertainty_minimum: 0.02
        uncertainty_maximum: 0.10
        marine_segment_filter:
            minimum_lead_number: 1
        tiepoint_maxdist_filter:
            maximum_distance_to_tiepoint: 200000.
            edges_only: false

# Estimation of Radar Freeboard (Does not make much sense for laser altimetry, but required and also identical step)
afrb:
    pyclass: RadarFreeboardDefault
    options: 
        dummy_option: null

# Algorithm for converting radar freeboard into freeboard 
# For ICESat no correction necessary 
frb: 
    pyclass: SnowFreeboardAssumption
    options: 
        dummy_option: null
        
# Algorithm for getting sea ice thickness from other l2 parameters
sit: 
    pyclass: SnowFreeboardDefault
    options: 
        water_density: 1024.0
        fyi_density: 916.7
        myi_density: 882.0
        # Base values for pure ice type uncertainties from Alexandrov et al., 2010, The Cryosphere
        uncertainty:
            fyi_density: 35.7
            myi_density: 23.0
        
# List of filter at different stages of l2 procesing 
# (can be list of filters)
filter: 

    # Filters after freeboard computation
    freeboard: 
        frb_valid_range: 
            pyclass: L2ParameterValidRange
            options: 
                valid_minimum_point_value: -0.25
                valid_maximum_point_value: 2.25
                
    # Filters after thickness computation
    thickness: 
        frb_valid_range: 
            pyclass: L2ParameterValidRange
            options: 
                valid_minimum_point_value: -0.5
                valid_maximum_point_value: 10.5
                
# Tests if l1b orbit file is valid
validator: 

    # Tests (Can be several) after surface type classification
    surface_type: 
        n_leads: 
            pyclass: LeadFixedMinimumNumber
            options: 
                minimum_n_leads: 3
        
# Post-Processing (tbd if needed)            
post_processing: null
