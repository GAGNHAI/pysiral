# Level 2 processor settings are mission specific
id: "ESA CCI Phase-2 Envisat Arctic climate data record v1 (ccicdr_envisat_nh_010)"
version_tag: "v1.0cci"

mission:
    id: envisat

# Regions Settings (for file selection and potential subsetting
roi:
    pyclass: LowerLatLimit
    hemisphere: north
    options:
        latitude_threshold: 50.0


# Sources of ancillary datasets
# (the tag "name" links to the corresponding tag in config/auxdata.yaml)
auxdata:

    mss:
        name: dtu15
        options: null
    sic:
        name: osisafcdr
        options: null
    sitype:
        name: icdc_nasateam
        options: null
    snow:
        name: warren99
        options:
            fyi_correction_factor: 0.5
            smooth_snow_depth: true
            smooth_filter_width_m: 25000.0
            valid_snow_depth_range: [0, 0.6]
            invalid_replace: nan

# geophysical corrections applied to the l1b range window
corrections:
    - dry_troposphere
    - wet_troposphere
    - inverse_barometric
    - ionospheric
    - ocean_tide_elastic
    - ocean_tide_long_period
    - ocean_loading_tide
    - solid_earth_tide
    - geocentric_polar_tide

# Apply corrections of filters to the l1b input data
# All pyclasses must be present in the pysiral.filter module
l1b_pre_filtering:

    # Apply a drift correction to Envisat backcatter
    # NOTE: 
    #   The backscatter correction is not part of the Envisat l1bdata v030. In future updates the correction
    #   will be applied in the actual pre-processor and this correction should be removed from the Level-2
    #   processor recipe
    envisat_backscatter_drift_correction: 
        pyclass: L1bBackscatterDriftCorrection
        options: 
            l1b_data_group: classifier
            l1b_parameter_name: sigma0
            backscatter_drift_factor: -0.003269253
            backscatter_base_period: [2011, 6]

# Surface type classification algorithm
surface_type:
    pyclass: SICCI2
    options:
        ocean:
            peakiness_max: 5.0
            ice_concentration_min: 5.0
        lead:
            peakiness_min: [46.90, 46.40, 46.20, 48.40, 0.00, 0.00, 0.00, 0.00, 0.00, 52.90, 51.00, 47.70]
            sea_ice_backscatter_min: [28.80, 28.60, 28.50, 28.40, 0.00, 0.00, 0.00, 0.00, 0.00, 32.80, 30.80, 29.30]
            leading_edge_width_max: [0.82, 0.82, 0.82, 0.82, 0.00, 0.00, 0.00, 0.00, 0.00, 0.82, 0.82, 0.82]
            ice_concentration_min: 70.0
        sea_ice:
            peakiness_max: [16.00, 14.80, 14.10, 14.20, 0.00, 0.00, 0.00, 0.00, 0.00, 19.40, 19.30, 16.90]
            sea_ice_backscatter_min: 2.5
            sea_ice_backscatter_max: [22.50, 21.80, 21.30, 20.40, 0.00, 0.00, 0.00, 0.00, 0.00, 25.90, 24.60, 22.80]
            leading_edge_width_min: [0.81, 0.83, 0.83, 0.83, 0.00, 0.00, 0.00, 0.00, 0.00, 0.78, 0.78, 0.80]
            ice_concentration_min: 70.0
            
# Retracking algorithm dependent on surface type
retracker:
    ocean:
        pyclass: NoneRetracker
        options: null
    lead:
        pyclass: SICCI2TfmraEnvisat
        options:
            # if arrays than [lrm, sar, sin]
            # type can be fixed, sigma_func and sitype_sigma_func
            threshold:
                type: fixed
                value: 0.95
            offset: 0.0
            wfm_oversampling_factor: 10
            wfm_oversampling_method: linear
            wfm_smoothing_window_size: [11, 11, 21]
            first_maximum_normalized_threshold: [0.15, 0.15, 0.45]
            first_maximum_local_order: 1
            uncertainty:
                type: fixed
                value: 0.15
    sea_ice:
        pyclass: SICCI2TfmraEnvisat
        options:
            # if arrays than [lrm, sar, sin]
            # type can be fixed, sigma_func and sitype_sigma_func
            threshold:
                type: poly_plane_fit
                intercept: 3.4775697362
                coef_lew: [-5.9296875486, 4.3516498381, -1.0933131955]
                coef_sig0: [-0.0914747272, 0.0063983796, -0.0001237455]
            offset: 0.0
            wfm_oversampling_factor: 10
            wfm_oversampling_method: linear
            wfm_smoothing_window_size: [11, 11, 21]
            first_maximum_normalized_threshold: [0.15, 0.15, 0.45]
            first_maximum_local_order: 1
            uncertainty:
                type: fixed
                value: 0.15

# Algorithm for instantaneos sea surface height (mss + ssa) and radar freeboard
ssa:
    pyclass: SSASmoothedLinear
    options:
        use_ocean_wfm: False
        smooth_filter_width_m: 200000.0
        smooth_filter_width_footprint_size: 300.0
        pre_filtering: true
        pre_filter_maximum_mss_median_offset: 5.0 # in meter
        uncertainty_tiepoints_distance_max: 100000.
        uncertainty_minimum: 0.02
        uncertainty_maximum: 0.10
        marine_segment_filter:
            minimum_lead_number: 1
        tiepoint_maxdist_filter:
            maximum_distance_to_tiepoint: 200000.
            edges_only: false

# Estimation of Radar Freeboard
afrb:
    pyclass: RadarFreeboardDefault
    options: null

# Algorithm for converting radar freeboard into freeboard
frb:
    pyclass: SnowGeometricCorrection
    options:
        vacuum_light_speed_reduction: 0.22

# Algorithm for getting sea ice thickness from other l2 parameters
sit:
    pyclass: SeaIceFreeboardDefault
    options:
        water_density: 1024.0
        fyi_density: 916.7
        myi_density: 882.0
        # Base values for pure ice type uncertainties from Alexandrov et al., 2010, The Cryosphere
        uncertainty:
            fyi_density: 35.7
            myi_density: 23.0

# List of filter at different stages of l2 procesing
# (can be list of filters)
filter:

    # Filters after freeboard computation
    freeboard: 
        frb_valid_range: 
            pyclass: L2ParameterValidRange
            options: 
                valid_minimum_point_value: -0.25
                valid_maximum_point_value: 2.25
                
    # Filters after thickness computation
    thickness: 
        frb_valid_range: 
            pyclass: L2ParameterValidRange
            options: 
                valid_minimum_point_value: -0.5
                valid_maximum_point_value: 10.5

# Tests if l1b orbit file is valid
validator:

    # Tests (Can be several) after surface type classification
    surface_type:
        n_leads:
            pyclass: LeadFixedMinimumNumber
            options:
                minimum_n_leads: 3

# Post-Processing (tbd if needed)
post_processing: null
