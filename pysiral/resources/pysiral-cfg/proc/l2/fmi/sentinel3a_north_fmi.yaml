# Based on sicci2sit_protoC01_cryosat2_north.yaml and added with uncertainty tags and updated ssa smoothing
# sitype and siconc = osisaf

id: "ESA CCI Phase-2 Sentinel-3a Arctic climate data record v1 (ccicdr_sentinel3a_nh_010)"
version_tag: "exp-v1p0"

# This settings file is valid for
hemisphere: north

# Level 2 processor settings are mission specific
mission:
    id: sentinel3a

# Sources of ancillary datasets
# (the tag "name" links to the corresponding tag in config/auxdata.yaml)
auxdata:

    - mss:
        name: dtu15
        options: null

    - sic:
        name: osisaf
        options: null

    - sitype:
        name: osisaf
        options: null

    - snow:
        name: warren99
        options: 
            fyi_correction_factor: 0.5
            smooth_snow_depth: true
            smooth_filter_width_m: 25000.0
            valid_snow_depth_range: [0, 0.6]
            invalid_replace: .0

    # Canadian and AARI ice charts added in fmi version
    - icechart:
        name: canada
        options: null

    - icechart_aari:
        name: aari
        options: null

# geophysical corrections applied to the l1b range window
corrections: 
    - dry_troposphere
    - wet_troposphere
    - inverse_barometric
    - ionospheric
    - ocean_tide_elastic
    - ocean_tide_long_period
    - ocean_loading_tide
    - solid_earth_tide
    - geocentric_polar_tide
    
# Surface type classification algorithm
surface_type: 
    pyclass: SICCI2
    options: 
        # in arrays, one value for each month
        ocean:
            peakiness_max: 5.0
            ice_concentration_min: 5.0
        lead:
            peakiness_min: [51.20, 51.80, 54.90, 59.20, 0.00, 0.00, 0.00, 0.00, 0.00, 51.00, 0.00, 0.00]
            sea_ice_backscatter_min: [58.40, 58.90, 59.60, 60.10, 0.00, 0.00, 0.00, 0.00, 57.00, 0.00, 0.00, 0.00]
            leading_edge_width_max: [1.22, 1.22, 1.19, 1.16, 0.00, 0.00, 0.00, 0.00, 0.00, 1.22, 0.00, 0.00]
            ice_concentration_min: 70.0
        sea_ice:
            peakiness_max: [18.90, 19.60, 21.20, 23.00, 0.00, 0.00, 0.00, 0.00, 0.00, 25.00, 0.00, 0.00]
            sea_ice_backscatter_min: 2.5
            sea_ice_backscatter_max: [53.90, 54.30, 54.30, 55.20, 0.00, 0.00, 0.00, 0.00, 65.00, 0.00, 0.00, 0.00]
            leading_edge_width_min: [1.53, 1.50, 1.44, 1.40, 0.00, 0.00, 0.00, 0.00, 0.00, 2.0, 0.00, 0.00]
            ice_concentration_min: 70.0

# Retracking algorithm dependent on surface type
retracker: 
    ocean: 
        # There is currently no retracker in pysiral (TFMRA gets biased high), which does a good job for ocean waveforms. 
        # This a dummy retracker (only returns nans)
        pyclass: NoneRetracker
        options: null
    lead: 
        pyclass: TFMRA
        options:
            # if arrays than [lrm, sar, sin]    
            threshold: 0.5
            offset: 0.0
            wfm_oversampling_factor: 10
            wfm_oversampling_method: linear
            wfm_smoothing_window_size: [11, 11, 21] 
            first_maximum_normalized_threshold: [0.15, 0.15, 0.45] 
            first_maximum_local_order: 1
            range_bias: [-0.022, 0.047, 0.017]
            uncertainty:
                type: fixed
                value: 0.1                
    sea_ice: 
        pyclass: TFMRA
        options: 
            # if arrays than [lrm, sar, sin]   
            threshold: 0.5
            offset: 0.0
            wfm_oversampling_factor: 10
            wfm_oversampling_method: linear
            wfm_smoothing_window_size: [11, 11, 21] 
            first_maximum_normalized_threshold: [0.15, 0.15, 0.45] 
            first_maximum_local_order: 1
            range_bias: [-0.022, 0.047, 0.017]
            uncertainty:
                type: fixed
                value: 0.1
            
# Algorithm for instantaneos sea surface height (mss + ssa) and radar freeboard 
ssa: 
    pyclass: SSASmoothedLinear
    options: 
        use_ocean_wfm: False
        smooth_filter_width_m: 100000.0
        smooth_filter_width_footprint_size: 300.0
        pre_filtering: true       
        pre_filter_maximum_mss_median_offset: 5.0 # in meter
        uncertainty_tiepoints_distance_max: 100000.
        uncertainty_minimum: 0.02
        uncertainty_maximum: 0.10
        marine_segment_filter:
            minimum_lead_number: 1
        tiepoint_maxdist_filter:
            maximum_distance_to_tiepoint: 200000.
            edges_only: false

# Estimation of Radar Freeboard
afrb:
    pyclass: RadarFreeboardDefault
    options: null

# Algorithm for converting radar freeboard into freeboard
frb: 
    pyclass: SnowGeometricCorrection
    options: 
        vacuum_light_speed_reduction: 0.22
        
# Algorithm for getting sea ice thickness from other l2 parameters
sit: 
    pyclass: SeaIceFreeboardDefault
    options: 
        water_density: 1024.0
        fyi_density: 916.7
        myi_density: 882.0
        # Base values for pure ice type uncertainties from Alexandrov et al., 2010, The Cryosphere
        uncertainty:
            fyi_density: 35.7
            myi_density: 23.0
        
# List of filter at different stages of l2 procesing 
# (can be list of filters)
filter: 

    # Filters after freeboard computation
    freeboard: 
        frb_valid_range: 
            pyclass: L2ParameterValidRange
            options: 
                valid_minimum_point_value: -0.25
                valid_maximum_point_value: 2.25
                
    # Filters after thickness computation
    thickness: 
        frb_valid_range: 
            pyclass: L2ParameterValidRange
            options: 
                valid_minimum_point_value: -0.5
                valid_maximum_point_value: 10.5
                
# Tests if l1b orbit file is valid
validator: 

    # Tests (Can be several) after surface type classification
    surface_type: 
        n_leads: 
            pyclass: LeadFixedMinimumNumber
            options: 
                minimum_n_leads: 3
        
# Post-Processing (tbd if needed)            
post_processing: null

