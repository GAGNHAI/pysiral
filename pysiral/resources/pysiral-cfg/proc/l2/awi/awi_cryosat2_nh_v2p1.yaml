# Based on sicci2sit_protoC01_cryosat2_north.yaml and added with uncertainty tags and updated ssa smoothing

id: "AWI CryoSat-2 Sea Ice Product (cs2awi v2.1) (awi_cryosat2_nh_020)"
version_tag: "v2p1awi"

# This settings file is valid for 
hemisphere: north

# Level 2 processor settings are mission specific
mission:
    id: cryosat2
    
# Sources of ancillary datasets
# (the tag "name" links to the corresponding tag in config/auxdata.yaml)
auxdata:
    
    - mss:
            name: dtu18
            options: 
                latitude_range: [50.0, 90.0]
    
    - sic:
            name: osisaf
            options:
                # These settings have been introduced with AWI v2p1 (pysiral v0.6.3)
                # All NaN values inside the pole hole latitude threshold will be set to 100%
                fill_pole_hole: 
                    pole_hole_lat_threshold: 87.0
                    pole_hole_fill_value: 100.
    
    - sitype:
            name: osisaf
            options: null
    
    - snow: 
            name: clim_w99amsr2
            options: 
                fyi_correction_factor: 0.5

# geophysical corrections applied to the l1b range window
corrections: 
    - dry_troposphere
    - wet_troposphere
    - inverse_barometric
    - ionospheric
    - ocean_tide_elastic
    - ocean_tide_long_period
    - ocean_loading_tide
    - solid_earth_tide
    - geocentric_polar_tide
    
# Surface type classification algorithm
surface_type: 
    pyclass: RickerTC2014
    options: 
        ocean:
            peakiness_min: 0.0
            peakiness_max: 10.0
            stack_standard_deviation_min: 18.5
            ice_concentration_min: 5.0
            ocog_width_min: 38
        lead: 
            peakiness_l_min: 40.0
            peakiness_r_min: 30.0
            peakiness_min: 40.0
            stack_kurtosis_min: 40.0
            stack_standard_deviation_max: 4.0
            ice_concentration_min: 70.0
        sea_ice: 
            peakiness_r_max: 15.0
            peakiness_l_max: 20.0
            peakiness_max: 30.0
            stack_kurtosis_max: 8.0
            ice_concentration_min: 70.0

# Retracking algorithm dependent on surface type
retracker: 
    ocean: 
        pyclass: NoneRetracker
        options: null
    lead: 
        pyclass: cTFMRA
        options:
            # if arrays than [lrm, sar, sin]    
            threshold: 0.5
            offset: 0.0
            wfm_oversampling_factor: 10
            wfm_oversampling_method: linear
            wfm_smoothing_window_size: [11, 11, 21] 
            first_maximum_normalized_threshold: [0.15, 0.15, 0.45] 
            first_maximum_local_order: 1
            range_bias: [-0.022, 0.047, 0.017]
            uncertainty:
                type: fixed
                value: 0.1                
    sea_ice: 
        pyclass: cTFMRA
        options: 
            # if arrays than [lrm, sar, sin]   
            threshold: 0.5
            offset: 0.0
            wfm_oversampling_factor: 10
            wfm_oversampling_method: linear
            wfm_smoothing_window_size: [11, 11, 21] 
            first_maximum_normalized_threshold: [0.15, 0.15, 0.45] 
            first_maximum_local_order: 1
            range_bias: [-0.022, 0.047, 0.017]
            uncertainty:
                type: fixed
                value: 0.1
            
# Algorithm for instantaneos sea surface height (mss + ssa) and radar freeboard 
ssa: 
    pyclass: SSASmoothedLinear
    options: 
        use_ocean_wfm: False
        smooth_filter_width_m: 100000.0
        smooth_filter_width_footprint_size: 300.0
        pre_filtering: true       
        pre_filter_maximum_mss_median_offset: 5.0 # in meter
        uncertainty_tiepoints_distance_max: 100000.
        uncertainty_minimum: 0.02
        uncertainty_maximum: 0.10
        marine_segment_filter:
            minimum_lead_number: 1
        tiepoint_maxdist_filter:
            maximum_distance_to_tiepoint: 200000.
            edges_only: false

# Estimation of Radar Freeboard
afrb:
    pyclass: RadarFreeboardDefault
    options: null

# Algorithm for converting radar freeboard into freeboard
frb: 
    pyclass: SnowGeometricCorrection
    options: 
        vacuum_light_speed_reduction: 0.22
        
# Algorithm for getting sea ice thickness from other l2 parameters
sit: 
    pyclass: SeaIceFreeboardDefault
    options: 
        water_density: 1024.0
        fyi_density: 916.7
        myi_density: 882.0
        # Base values for pure ice type uncertainties from Alexandrov et al., 2010, The Cryosphere
        uncertainty:
            fyi_density: 35.7
            myi_density: 23.0
        
# List of filter at different stages of l2 procesing 
# (can be list of filters)
filter: 

    # Filters after freeboard computation
    freeboard: 
        frb_valid_range: 
            pyclass: L2ParameterValidRange
            options: 
                valid_minimum_point_value: -0.25
                valid_maximum_point_value: 2.25
                
    # Filters after thickness computation
    thickness: 
        frb_valid_range: 
            pyclass: L2ParameterValidRange
            options: 
                valid_minimum_point_value: -0.5
                valid_maximum_point_value: 10.5
                
# Tests if l1b orbit file is valid
validator: 

    # Tests (Can be several) after surface type classification
    surface_type: 
        n_leads: 
            pyclass: LeadFixedMinimumNumber
            options: 
                minimum_n_leads: 3
        
# Post-Processing (tbd if needed)            
post_processing: null
